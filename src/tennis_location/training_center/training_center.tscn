[gd_scene load_steps=23 format=3 uid="uid://blld3hbrvik01"]

[ext_resource type="Script" path="res://src/tennis_location/training_center/test.gd" id="1_5sgd4"]
[ext_resource type="Script" path="res://src/tennis_location/training_center/training_center.gd" id="2"]
[ext_resource type="PackedScene" uid="uid://bujaw8qgawaj8" path="res://src/players/humanPlayer.tscn" id="3_7h1o0"]
[ext_resource type="PackedScene" uid="uid://bq11dsxkra3s4" path="res://src/cameras.tscn" id="4_5o1ux"]
[ext_resource type="PackedScene" uid="uid://drrxciscdtoof" path="res://src/tennis_session/training/training.tscn" id="4_jnvyn"]
[ext_resource type="PackedScene" uid="uid://d237t32p1sgei" path="res://src/tennis_location/us_open/stadium.tscn" id="4_m5qak"]
[ext_resource type="PackedScene" uid="uid://fdj1nvw8fcxn" path="res://src/players/AiPlayer.tscn" id="4_yhclo"]
[ext_resource type="PackedScene" uid="uid://cqtiji5vwaevb" path="res://src/ball-canon.tscn" id="7_oebhl"]
[ext_resource type="PackedScene" uid="uid://brw673es8wnx2" path="res://src/trajectory_drawer.tscn" id="8_52n33"]

[sub_resource type="Shader" id="Shader_rdv83"]
code = "
// NOTE: Shader automatically converted from Godot Engine 4.3.stable's ProceduralSkyMaterial.

shader_type sky;
render_mode use_debanding;

uniform vec4 sky_top_color : source_color = vec4(0.385, 0.454, 0.55, 1.0);
uniform vec4 sky_horizon_color : source_color = vec4(0.646, 0.656, 0.67, 1.0);
uniform float sky_curve : hint_range(0, 1) = 0.15;
uniform float sky_energy = 1.0; // In Lux.
uniform sampler2D sky_cover : filter_linear, source_color, hint_default_black;
uniform vec4 sky_cover_modulate : source_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform vec4 ground_bottom_color : source_color = vec4(0.2, 0.169, 0.133, 1.0);
uniform vec4 ground_horizon_color : source_color = vec4(0.646, 0.656, 0.67, 1.0);
uniform float ground_curve : hint_range(0, 1) = 0.02;
uniform float ground_energy = 1.0;
uniform float sun_angle_max = 30.0;
uniform float sun_curve : hint_range(0, 1) = 0.15;
uniform float exposure : hint_range(0, 128) = 1.0;

uniform sampler2D cloud_texture;
uniform sampler2D cloud_texture2;
uniform vec2 cloud_direction;
uniform vec2 cloud_direction2;
uniform vec2 cloud_scale;
uniform float cloud_distance;
uniform float cloud_speed;
uniform float cloud_speed2;

void sky() {
	float v_angle = acos(clamp(EYEDIR.y, -1.0, 1.0));
	float c = (1.0 - v_angle / (PI * 0.5));
	vec3 sky = mix(sky_horizon_color.rgb, sky_top_color.rgb, clamp(1.0 - pow(1.0 - c, 1.0 / sky_curve), 0.0, 1.0));
	sky *= sky_energy;

	if (LIGHT0_ENABLED) {
		float sun_angle = acos(dot(LIGHT0_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT0_SIZE) {
			sky = LIGHT0_COLOR * LIGHT0_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT0_SIZE) / (sun_angle_max - LIGHT0_SIZE);
			sky = mix(LIGHT0_COLOR * LIGHT0_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	if (LIGHT1_ENABLED) {
		float sun_angle = acos(dot(LIGHT1_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT1_SIZE) {
			sky = LIGHT1_COLOR * LIGHT1_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT1_SIZE) / (sun_angle_max - LIGHT1_SIZE);
			sky = mix(LIGHT1_COLOR * LIGHT1_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	if (LIGHT2_ENABLED) {
		float sun_angle = acos(dot(LIGHT2_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT2_SIZE) {
			sky = LIGHT2_COLOR * LIGHT2_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT2_SIZE) / (sun_angle_max - LIGHT2_SIZE);
			sky = mix(LIGHT2_COLOR * LIGHT2_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	if (LIGHT3_ENABLED) {
		float sun_angle = acos(dot(LIGHT3_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT3_SIZE) {
			sky = LIGHT3_COLOR * LIGHT3_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT3_SIZE) / (sun_angle_max - LIGHT3_SIZE);
			sky = mix(LIGHT3_COLOR * LIGHT3_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	vec4 sky_cover_texture = texture(sky_cover, SKY_COORDS);
	sky += (sky_cover_texture.rgb * sky_cover_modulate.rgb) * sky_cover_texture.a * sky_cover_modulate.a * sky_energy;

	c = (v_angle - (PI * 0.5)) / (PI * 0.5);
	vec3 ground = mix(ground_horizon_color.rgb, ground_bottom_color.rgb, clamp(1.0 - pow(1.0 - c, 1.0 / ground_curve), 0.0, 1.0));
	ground *= ground_energy;

	vec2 sky_uv = EYEDIR.xz / EYEDIR.y;
	vec3 clouds = texture(cloud_texture, sky_uv * cloud_scale + TIME * cloud_direction * cloud_speed).rgb - texture(cloud_texture2, sky_uv * cloud_scale + TIME * cloud_direction2 * cloud_speed2).rgb;
	//clouds = clouds - smoothstep(0.0, EYEDIR.y, cloud_distance);
	clouds = clamp(clouds, 0.0, 1.0);
	sky += clouds;
	
	COLOR = mix(ground, sky, step(0.0, EYEDIR.y)) * exposure;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_omcqj"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_0cs1n"]
width = 1024
height = 1024
seamless = true
noise = SubResource("FastNoiseLite_omcqj")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_jtuec"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_udx35"]
width = 1024
height = 1024
seamless = true
noise = SubResource("FastNoiseLite_jtuec")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_tuevj"]
shader = SubResource("Shader_rdv83")
shader_parameter/sky_top_color = Color(0.291673, 0.457424, 0.658811, 1)
shader_parameter/sky_horizon_color = Color(0.6463, 0.6558, 0.6708, 1)
shader_parameter/sky_curve = 0.15
shader_parameter/sky_energy = 1.0
shader_parameter/sky_cover_modulate = Color(1, 1, 1, 1)
shader_parameter/ground_bottom_color = Color(0.2, 0.169, 0.133, 1)
shader_parameter/ground_horizon_color = Color(0.646, 0.656, 0.67, 1)
shader_parameter/ground_curve = 0.02
shader_parameter/ground_energy = 1.0
shader_parameter/sun_angle_max = 0.523599
shader_parameter/sun_curve = 0.15
shader_parameter/exposure = 1.0
shader_parameter/cloud_direction = Vector2(-1, 1)
shader_parameter/cloud_direction2 = Vector2(1, 0)
shader_parameter/cloud_scale = Vector2(0.05, 0.05)
shader_parameter/cloud_distance = null
shader_parameter/cloud_speed = 0.001
shader_parameter/cloud_speed2 = 0.002
shader_parameter/cloud_texture = SubResource("NoiseTexture2D_0cs1n")
shader_parameter/cloud_texture2 = SubResource("NoiseTexture2D_udx35")

[sub_resource type="Sky" id="Sky_m0hxs"]
sky_material = SubResource("ShaderMaterial_tuevj")

[sub_resource type="Environment" id="Environment_qvt5p"]
background_mode = 2
sky = SubResource("Sky_m0hxs")
tonemap_mode = 1
glow_enabled = true
glow_normalized = true

[sub_resource type="BoxShape3D" id="BoxShape3D_t2yi8"]
size = Vector3(38.3846, 2, 46.8104)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_gcn7x"]
albedo_color = Color(1, 0, 0, 1)

[sub_resource type="CylinderMesh" id="CylinderMesh_oyuxu"]
material = SubResource("StandardMaterial3D_gcn7x")

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_e84ga"]
albedo_color = Color(0.0253638, 0.0253638, 0.0253638, 1)

[sub_resource type="PlaneMesh" id="PlaneMesh_4lgiy"]
material = SubResource("StandardMaterial3D_e84ga")

[node name="Node3D" type="Node3D"]
script = ExtResource("1_5sgd4")

[node name="TrainingCenter" type="Node3D" parent="."]
script = ExtResource("2")

[node name="Player" parent="TrainingCenter" instance=ExtResource("3_7h1o0")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 13.2728)

[node name="Skeleton3D" parent="TrainingCenter/Player/Model/v3player/Rig" index="0"]
bones/0/position = Vector3(-0.173914, 1.21801, 0.249256)
bones/0/rotation = Quaternion(-0.786455, 0.253273, 0.472232, -0.307145)
bones/0/scale = Vector3(1.02229, 1.02229, 1.02229)
bones/1/position = Vector3(-0.0993901, 1.17821, -0.253512)
bones/1/rotation = Quaternion(-0.330723, -0.423335, 0.815038, 0.217079)
bones/1/scale = Vector3(1.0287, 1.0287, 1.0287)
bones/4/position = Vector3(-0.132485, 1.29791, 0)
bones/4/rotation = Quaternion(-0.503426, -0.497025, -0.502948, 0.49656)
bones/4/scale = Vector3(1.0161, 1.01621, 1.02498)
bones/5/scale = Vector3(1.00293, 1.00292, 0.994196)
bones/7/scale = Vector3(1.00293, 1.00292, 0.994196)
bones/9/scale = Vector3(1.00293, 1.00292, 0.994196)
bones/10/scale = Vector3(1.00293, 1.00292, 0.994196)
bones/13/scale = Vector3(0.995597, 1.00887, 0.995597)
bones/14/scale = Vector3(0.991483, 1.03058, 0.990587)
bones/15/rotation = Quaternion(-0.0184699, 5.00255e-16, 3.47267e-16, 0.999829)
bones/15/scale = Vector3(1.02485, 0.987248, 1.02478)
bones/16/rotation = Quaternion(0.217312, 7.97213e-17, -1.53884e-16, 0.976102)
bones/16/scale = Vector3(1.01259, 1.00153, 1.01017)
bones/17/rotation = Quaternion(0.0257939, 4.85727e-16, -2.01388e-15, 0.999667)
bones/17/scale = Vector3(0.976196, 0.976118, 0.976189)
bones/18/rotation = Quaternion(-0.161381, 4.31646e-08, -6.8923e-09, 0.986892)
bones/19/position = Vector3(0.24925, -0.173912, 1.218)
bones/19/rotation = Quaternion(0.118115, 0.939007, -0.182605, 0.266404)
bones/19/scale = Vector3(1, 25.0004, 1)
bones/20/position = Vector3(-0.253513, -0.099391, 1.17821)
bones/20/rotation = Quaternion(-0.143716, 0.942557, -0.170257, -0.248885)
bones/20/scale = Vector3(1, 21.974, 1)
bones/26/position = Vector3(0, 0.00920454, 0.16384)
bones/26/rotation = Quaternion(-0.00793324, -5.88233e-19, 3.68737e-16, 0.999969)
bones/26/scale = Vector3(1.02429, 1.02429, 1.02429)
bones/110/position = Vector3(2.77556e-17, 0.00920454, 0.161349)
bones/110/rotation = Quaternion(-0.00264003, 3.14816e-11, -1.19248e-08, 0.999997)
bones/110/scale = Vector3(1.00806, 1.00806, 1.0081)
bones/112/rotation = Quaternion(0.134023, -1.45299e-16, -2.46472e-17, 0.990978)
bones/112/scale = Vector3(0.996026, 0.996013, 0.996027)
bones/115/position = Vector3(-1.33611e-16, 0.0634899, 0.000174141)
bones/115/rotation = Quaternion(-0.661296, 2.46446e-16, 2.40733e-16, 0.750125)
bones/115/scale = Vector3(1.00806, 1.00806, 1.0081)
bones/119/position = Vector3(-9.58251e-18, 0.140743, 0.000212533)
bones/119/rotation = Quaternion(-0.650306, -1.1704e-16, -1.07142e-16, 0.759672)
bones/119/scale = Vector3(1.00806, 1.00806, 1.0081)
bones/121/rotation = Quaternion(0.0257829, 4.27809e-16, -2.07863e-15, 0.999668)
bones/121/scale = Vector3(0.976196, 0.97612, 0.976187)
bones/122/rotation = Quaternion(-0.161381, 4.31646e-08, -6.8923e-09, 0.986892)
bones/615/rotation = Quaternion(-0.797906, 5.96811e-17, 3.58292e-17, 0.602782)
bones/615/scale = Vector3(0.976196, 0.976195, 0.976111)
bones/616/rotation = Quaternion(0.813181, -3.42319e-17, 6.22791e-17, 0.582011)
bones/617/rotation = Quaternion(-0.810855, 3.54436e-08, 2.5582e-08, 0.585247)
bones/623/position = Vector3(0.0231264, 0.1503, 0.0322286)
bones/623/rotation = Quaternion(0.612944, 0.518978, 0.46155, -0.37674)
bones/624/rotation = Quaternion(-0.413723, -0.03605, -0.164372, 0.894715)
bones/624/scale = Vector3(0.988088, 0.988061, 0.988093)
bones/625/rotation = Quaternion(0.0284309, 0.656262, -0.576024, 0.486527)
bones/625/scale = Vector3(0.976167, 0.976146, 0.976189)
bones/626/rotation = Quaternion(0.543736, -0.00188178, 0.092847, 0.834103)
bones/627/rotation = Quaternion(0.0803584, -0.657572, -0.0746173, 0.745369)
bones/632/rotation = Quaternion(1.97659e-07, -0.352573, -6.60814e-08, 0.935785)
bones/635/rotation = Quaternion(2.7008e-08, -0.169143, -1.27661e-07, 0.985592)
bones/638/scale = Vector3(0.976175, 0.976147, 0.976179)
bones/639/scale = Vector3(0.976196, 0.976195, 0.976111)
bones/640/rotation = Quaternion(-0.408558, -0.443954, 0.792613, 0.0880319)
bones/641/rotation = Quaternion(0.543737, -0.00188232, 0.0928464, 0.834102)
bones/643/rotation = Quaternion(0.0684651, -0.658424, -0.0301916, 0.748919)
bones/644/rotation = Quaternion(-0.278017, -0.519852, 0.780481, -0.208111)
bones/645/rotation = Quaternion(-0.18892, -0.0231471, -0.00445449, 0.98171)
bones/645/scale = Vector3(1.00071, 1.00071, 1.00071)
bones/646/rotation = Quaternion(0.365409, -1.89059e-06, -6.97006e-07, 0.930847)
bones/647/rotation = Quaternion(-0.148443, 0.476797, -0.557288, 0.66337)
bones/647/scale = Vector3(0.976188, 0.976146, 0.976168)
bones/649/rotation = Quaternion(-0.148441, 0.476797, -0.557288, 0.663371)
bones/649/scale = Vector3(0.976188, 0.976146, 0.976168)
bones/650/rotation = Quaternion(-2.41296e-07, 0.139226, -1.06722e-07, 0.990261)
bones/651/rotation = Quaternion(0.551599, 0.139223, -0.000453307, 0.822408)
bones/652/rotation = Quaternion(-6.4005e-08, -0.353033, 9.10521e-08, 0.935611)
bones/653/rotation = Quaternion(0.0488454, -0.352113, -0.0981924, 0.92951)
bones/748/position = Vector3(-0.0231264, 0.150286, 0.0322323)
bones/748/rotation = Quaternion(0.612944, -0.518978, -0.46155, -0.37674)
bones/749/rotation = Quaternion(-0.432571, -0.00273637, 0.0895446, 0.897138)
bones/749/scale = Vector3(0.988093, 0.988054, 0.988096)
bones/750/rotation = Quaternion(-0.135862, -0.696124, 0.536334, 0.457492)
bones/750/scale = Vector3(0.976183, 0.976124, 0.976194)
bones/751/rotation = Quaternion(0.579474, -0.195732, -0.120479, 0.78191)
bones/764/rotation = Quaternion(8.10589e-08, 0.0556288, 1.02055e-07, 0.998452)
bones/767/scale = Vector3(0.976175, 0.976147, 0.976179)
bones/768/scale = Vector3(0.976196, 0.976195, 0.976111)
bones/769/rotation = Quaternion(0.322646, -0.586924, 0.736578, -0.094195)
bones/770/rotation = Quaternion(0.579475, -0.195732, -0.120479, 0.781909)
bones/773/rotation = Quaternion(0.278017, -0.519851, 0.780481, 0.208112)
bones/774/rotation = Quaternion(-0.188919, 0.0231471, 0.0044544, 0.98171)
bones/774/scale = Vector3(1.00071, 1.00071, 1.00071)
bones/775/rotation = Quaternion(0.365394, 2.02106e-06, 7.78588e-07, 0.930853)
bones/776/rotation = Quaternion(-0.286849, -0.531796, 0.473102, 0.64116)
bones/776/scale = Vector3(0.976191, 0.976124, 0.976187)
bones/778/rotation = Quaternion(-0.286849, -0.531796, 0.473102, 0.64116)
bones/778/scale = Vector3(0.976191, 0.976124, 0.976188)
bones/779/rotation = Quaternion(8.62297e-08, -0.238934, -1.68452e-07, 0.971036)
bones/780/rotation = Quaternion(0.585282, -0.23894, -0.088047, 0.769805)
bones/877/position = Vector3(0.0231264, 0.1503, 0.0322286)
bones/877/rotation = Quaternion(0.612944, 0.518978, 0.46155, -0.37674)
bones/878/position = Vector3(-0.0231264, 0.150286, 0.0322323)
bones/878/rotation = Quaternion(0.612944, -0.518978, -0.46155, -0.37674)
bones/883/position = Vector3(0.419253, 1.03457, 0.458336)
bones/883/rotation = Quaternion(-0.505939, -0.493991, -0.505938, 0.493989)
bones/883/scale = Vector3(1.0244, 1.0244, 1.02449)
bones/888/position = Vector3(0.419253, 1.03457, -0.458336)
bones/888/rotation = Quaternion(-0.505938, -0.493989, -0.50594, 0.493991)
bones/888/scale = Vector3(1.0244, 1.0244, 1.02449)
bones/890/position = Vector3(-0.20401, 1.64547, 1.49012e-08)
bones/922/position = Vector3(-0.148551, 1.5771, 0.0122488)
bones/925/position = Vector3(-0.148551, 1.5771, -0.0122485)
bones/928/position = Vector3(-0.149933, 1.58442, 0.0124496)
bones/931/position = Vector3(-0.149933, 1.58442, -0.0124496)

[node name="racket" parent="TrainingCenter/Player/Model/v3player/Rig/Skeleton3D" index="0"]
transform = Transform3D(0.722282, 0.620954, 0.304479, -0.626704, 0.773886, -0.0917153, -0.29257, -0.124601, 0.948081, -0.474944, 1.34757, 0.0724051)

[node name="AiPlayer2" parent="TrainingCenter" instance=ExtResource("4_yhclo")]
transform = Transform3D(-1, 0, -8.74228e-08, 0, 1, 0, 8.74228e-08, 0, -1, 0, 0, -12.7524)

[node name="WorldEnvironment" type="WorldEnvironment" parent="TrainingCenter"]
environment = SubResource("Environment_qvt5p")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="TrainingCenter"]
transform = Transform3D(-0.866024, -0.433016, 0.25, -0.225714, 0.78472, 0.577295, -0.446156, 0.44352, -0.777324, 0, 5.70078, 0)
shadow_enabled = true

[node name="Positions" type="Node3D" parent="TrainingCenter"]

[node name="SE" type="Marker3D" parent="TrainingCenter/Positions"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.994293, 0, 12.1442)

[node name="NW" type="Marker3D" parent="TrainingCenter/Positions"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.972189, 0, -13.487)

[node name="Ground2" type="StaticBody3D" parent="TrainingCenter"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -1, 0)

[node name="CollisionShape3D" type="CollisionShape3D" parent="TrainingCenter/Ground2"]
shape = SubResource("BoxShape3D_t2yi8")

[node name="Stadium" parent="TrainingCenter" instance=ExtResource("4_m5qak")]

[node name="Cameras" parent="TrainingCenter" instance=ExtResource("4_5o1ux")]

[node name="Training" parent="TrainingCenter" instance=ExtResource("4_jnvyn")]

[node name="BallCanon" parent="TrainingCenter" instance=ExtResource("7_oebhl")]
transform = Transform3D(-0.965659, 0, -0.259814, 0, 1, 0, 0.259814, 0, -0.965659, -3.82491, 0, -4.53048)
velocity_length = 13.0
shoot_off_angle = 5.0

[node name="Marker3D2" type="Marker3D" parent="TrainingCenter"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -5, 2.1, -5.27)

[node name="BallAimMarker" type="MeshInstance3D" parent="TrainingCenter"]
transform = Transform3D(0.277424, 0, -8.44111e-08, 0, 0.107815, 0, 8.37798e-08, 0, 0.279514, 0, 0, 0)
mesh = SubResource("CylinderMesh_oyuxu")
skeleton = NodePath("../..")

[node name="Marker3D" type="Marker3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -59.322, 0.327529, 13.4815)

[node name="TrajectoryDrawer" parent="." instance=ExtResource("8_52n33")]
skeleton = NodePath("../TrainingCenter")

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(1284.83, 0, 0, 0, 2.2935, 0, 0, 0, 1299.25, 0, -0.05, 0)
mesh = SubResource("PlaneMesh_4lgiy")

[node name="SpotLight3D" type="SpotLight3D" parent="."]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, 0, 36.8647, 22.2819)
light_color = Color(0.605553, 0.539689, 0.02218, 1)
light_energy = 16.0
light_indirect_energy = 16.0
light_volumetric_fog_energy = 16.0
shadow_enabled = true
spot_range = 4096.0
spot_attenuation = 0.15
spot_angle = 11.22

[editable path="TrainingCenter/Player"]
[editable path="TrainingCenter/Player/Model"]
[editable path="TrainingCenter/Player/Model/v3player"]
[editable path="TrainingCenter/Stadium"]
[editable path="TrainingCenter/Stadium/stadium"]
[editable path="TrainingCenter/Cameras"]
