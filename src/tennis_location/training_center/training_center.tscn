[gd_scene load_steps=23 format=3 uid="uid://blld3hbrvik01"]

[ext_resource type="Script" uid="uid://kn4lg53th5v8" path="res://src/tennis_location/training_center/test.gd" id="1_5sgd4"]
[ext_resource type="Script" uid="uid://bdj4rv47okym" path="res://src/tennis_location/training_center/training_center.gd" id="2"]
[ext_resource type="PackedScene" uid="uid://bujaw8qgawaj8" path="res://src/players/humanPlayer.tscn" id="3_7h1o0"]
[ext_resource type="PackedScene" uid="uid://bq11dsxkra3s4" path="res://src/cameras.tscn" id="4_5o1ux"]
[ext_resource type="PackedScene" uid="uid://drrxciscdtoof" path="res://src/tennis_session/training/training.tscn" id="4_jnvyn"]
[ext_resource type="PackedScene" uid="uid://d237t32p1sgei" path="res://src/tennis_location/us_open/stadium.tscn" id="4_m5qak"]
[ext_resource type="PackedScene" uid="uid://fdj1nvw8fcxn" path="res://src/players/AiPlayer.tscn" id="4_yhclo"]
[ext_resource type="PackedScene" uid="uid://cqtiji5vwaevb" path="res://src/ball-canon.tscn" id="7_oebhl"]
[ext_resource type="PackedScene" uid="uid://brw673es8wnx2" path="res://src/trajectory_drawer.tscn" id="8_52n33"]

[sub_resource type="Shader" id="Shader_rdv83"]
code = "
// NOTE: Shader automatically converted from Godot Engine 4.3.stable's ProceduralSkyMaterial.

shader_type sky;
render_mode use_debanding;

uniform vec4 sky_top_color : source_color = vec4(0.385, 0.454, 0.55, 1.0);
uniform vec4 sky_horizon_color : source_color = vec4(0.646, 0.656, 0.67, 1.0);
uniform float sky_curve : hint_range(0, 1) = 0.15;
uniform float sky_energy = 1.0; // In Lux.
uniform sampler2D sky_cover : filter_linear, source_color, hint_default_black;
uniform vec4 sky_cover_modulate : source_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform vec4 ground_bottom_color : source_color = vec4(0.2, 0.169, 0.133, 1.0);
uniform vec4 ground_horizon_color : source_color = vec4(0.646, 0.656, 0.67, 1.0);
uniform float ground_curve : hint_range(0, 1) = 0.02;
uniform float ground_energy = 1.0;
uniform float sun_angle_max = 30.0;
uniform float sun_curve : hint_range(0, 1) = 0.15;
uniform float exposure : hint_range(0, 128) = 1.0;

uniform sampler2D cloud_texture;
uniform sampler2D cloud_texture2;
uniform vec2 cloud_direction;
uniform vec2 cloud_direction2;
uniform vec2 cloud_scale;
uniform float cloud_distance;
uniform float cloud_speed;
uniform float cloud_speed2;

void sky() {
	float v_angle = acos(clamp(EYEDIR.y, -1.0, 1.0));
	float c = (1.0 - v_angle / (PI * 0.5));
	vec3 sky = mix(sky_horizon_color.rgb, sky_top_color.rgb, clamp(1.0 - pow(1.0 - c, 1.0 / sky_curve), 0.0, 1.0));
	sky *= sky_energy;

	if (LIGHT0_ENABLED) {
		float sun_angle = acos(dot(LIGHT0_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT0_SIZE) {
			sky = LIGHT0_COLOR * LIGHT0_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT0_SIZE) / (sun_angle_max - LIGHT0_SIZE);
			sky = mix(LIGHT0_COLOR * LIGHT0_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	if (LIGHT1_ENABLED) {
		float sun_angle = acos(dot(LIGHT1_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT1_SIZE) {
			sky = LIGHT1_COLOR * LIGHT1_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT1_SIZE) / (sun_angle_max - LIGHT1_SIZE);
			sky = mix(LIGHT1_COLOR * LIGHT1_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	if (LIGHT2_ENABLED) {
		float sun_angle = acos(dot(LIGHT2_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT2_SIZE) {
			sky = LIGHT2_COLOR * LIGHT2_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT2_SIZE) / (sun_angle_max - LIGHT2_SIZE);
			sky = mix(LIGHT2_COLOR * LIGHT2_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	if (LIGHT3_ENABLED) {
		float sun_angle = acos(dot(LIGHT3_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT3_SIZE) {
			sky = LIGHT3_COLOR * LIGHT3_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT3_SIZE) / (sun_angle_max - LIGHT3_SIZE);
			sky = mix(LIGHT3_COLOR * LIGHT3_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	vec4 sky_cover_texture = texture(sky_cover, SKY_COORDS);
	sky += (sky_cover_texture.rgb * sky_cover_modulate.rgb) * sky_cover_texture.a * sky_cover_modulate.a * sky_energy;

	c = (v_angle - (PI * 0.5)) / (PI * 0.5);
	vec3 ground = mix(ground_horizon_color.rgb, ground_bottom_color.rgb, clamp(1.0 - pow(1.0 - c, 1.0 / ground_curve), 0.0, 1.0));
	ground *= ground_energy;

	vec2 sky_uv = EYEDIR.xz / EYEDIR.y;
	vec3 clouds = texture(cloud_texture, sky_uv * cloud_scale + TIME * cloud_direction * cloud_speed).rgb - texture(cloud_texture2, sky_uv * cloud_scale + TIME * cloud_direction2 * cloud_speed2).rgb;
	//clouds = clouds - smoothstep(0.0, EYEDIR.y, cloud_distance);
	clouds = clamp(clouds, 0.0, 1.0);
	sky += clouds;
	
	COLOR = mix(ground, sky, step(0.0, EYEDIR.y)) * exposure;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_omcqj"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_0cs1n"]
width = 1024
height = 1024
seamless = true
noise = SubResource("FastNoiseLite_omcqj")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_jtuec"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_udx35"]
width = 1024
height = 1024
seamless = true
noise = SubResource("FastNoiseLite_jtuec")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_tuevj"]
shader = SubResource("Shader_rdv83")
shader_parameter/sky_top_color = Color(0.291673, 0.457424, 0.658811, 1)
shader_parameter/sky_horizon_color = Color(0.6463, 0.6558, 0.6708, 1)
shader_parameter/sky_curve = 0.15
shader_parameter/sky_energy = 1.0
shader_parameter/sky_cover_modulate = Color(1, 1, 1, 1)
shader_parameter/ground_bottom_color = Color(0.2, 0.169, 0.133, 1)
shader_parameter/ground_horizon_color = Color(0.646, 0.656, 0.67, 1)
shader_parameter/ground_curve = 0.02
shader_parameter/ground_energy = 1.0
shader_parameter/sun_angle_max = 0.523599
shader_parameter/sun_curve = 0.15
shader_parameter/exposure = 1.0
shader_parameter/cloud_texture = SubResource("NoiseTexture2D_0cs1n")
shader_parameter/cloud_texture2 = SubResource("NoiseTexture2D_udx35")
shader_parameter/cloud_direction = Vector2(-1, 1)
shader_parameter/cloud_direction2 = Vector2(1, 0)
shader_parameter/cloud_scale = Vector2(0.05, 0.05)
shader_parameter/cloud_distance = 0.0
shader_parameter/cloud_speed = 0.001
shader_parameter/cloud_speed2 = 0.002

[sub_resource type="Sky" id="Sky_m0hxs"]
sky_material = SubResource("ShaderMaterial_tuevj")

[sub_resource type="Environment" id="Environment_qvt5p"]
background_mode = 2
sky = SubResource("Sky_m0hxs")
tonemap_mode = 1
glow_enabled = true
glow_normalized = true

[sub_resource type="BoxShape3D" id="BoxShape3D_t2yi8"]
size = Vector3(38.3846, 2, 46.8104)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_gcn7x"]
albedo_color = Color(1, 0, 0, 1)

[sub_resource type="CylinderMesh" id="CylinderMesh_oyuxu"]
material = SubResource("StandardMaterial3D_gcn7x")

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_e84ga"]
albedo_color = Color(0.0253638, 0.0253638, 0.0253638, 1)

[sub_resource type="PlaneMesh" id="PlaneMesh_4lgiy"]
material = SubResource("StandardMaterial3D_e84ga")

[node name="Node3D" type="Node3D"]
script = ExtResource("1_5sgd4")

[node name="TrainingCenter" type="Node3D" parent="."]
script = ExtResource("2")

[node name="Player" parent="TrainingCenter" instance=ExtResource("3_7h1o0")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 13.2728)

[node name="AiPlayer2" parent="TrainingCenter" instance=ExtResource("4_yhclo")]
transform = Transform3D(-1, 0, -8.74228e-08, 0, 1, 0, 8.74228e-08, 0, -1, 0, 0, -12.7524)

[node name="WorldEnvironment" type="WorldEnvironment" parent="TrainingCenter"]
environment = SubResource("Environment_qvt5p")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="TrainingCenter"]
transform = Transform3D(-0.866024, -0.433016, 0.25, -0.225714, 0.78472, 0.577295, -0.446156, 0.44352, -0.777324, 0, 5.70078, 0)
shadow_enabled = true

[node name="Positions" type="Node3D" parent="TrainingCenter"]

[node name="SE" type="Marker3D" parent="TrainingCenter/Positions"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.994293, 0, 12.1442)

[node name="NW" type="Marker3D" parent="TrainingCenter/Positions"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.972189, 0, -13.487)

[node name="Ground2" type="StaticBody3D" parent="TrainingCenter"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -1, 0)

[node name="CollisionShape3D" type="CollisionShape3D" parent="TrainingCenter/Ground2"]
shape = SubResource("BoxShape3D_t2yi8")

[node name="Stadium" parent="TrainingCenter" instance=ExtResource("4_m5qak")]

[node name="Cameras" parent="TrainingCenter" instance=ExtResource("4_5o1ux")]

[node name="Training" parent="TrainingCenter" instance=ExtResource("4_jnvyn")]

[node name="BallCanon" parent="TrainingCenter" instance=ExtResource("7_oebhl")]
transform = Transform3D(-0.965659, 0, -0.259814, 0, 1, 0, 0.259814, 0, -0.965659, -3.82491, 0, -4.53048)
velocity_length = 13.0
shoot_off_angle = 5.0

[node name="Marker3D2" type="Marker3D" parent="TrainingCenter"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -5, 2.1, -5.27)

[node name="BallAimMarker" type="MeshInstance3D" parent="TrainingCenter"]
transform = Transform3D(0.277424, 0, -8.44111e-08, 0, 0.107815, 0, 8.37798e-08, 0, 0.279514, 0, 0, 0)
mesh = SubResource("CylinderMesh_oyuxu")
skeleton = NodePath("../..")

[node name="Marker3D" type="Marker3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -59.322, 0.327529, 13.4815)

[node name="TrajectoryDrawer" parent="." instance=ExtResource("8_52n33")]
skeleton = NodePath("../TrainingCenter")

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(1284.83, 0, 0, 0, 2.2935, 0, 0, 0, 1299.25, 0, -0.05, 0)
mesh = SubResource("PlaneMesh_4lgiy")

[node name="SpotLight3D" type="SpotLight3D" parent="."]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, 0, 36.8647, 22.2819)
light_color = Color(0.605553, 0.539689, 0.02218, 1)
light_energy = 16.0
light_indirect_energy = 16.0
light_volumetric_fog_energy = 16.0
shadow_enabled = true
spot_range = 4096.0
spot_attenuation = 0.15
spot_angle = 11.22

[editable path="TrainingCenter/Player"]
[editable path="TrainingCenter/Player/Model"]
[editable path="TrainingCenter/Stadium"]
[editable path="TrainingCenter/Cameras"]
