[gd_scene load_steps=22 format=3 uid="uid://bcwuxgarbilrg"]

[ext_resource type="Script" path="res://src/tennis_session/tennis_match.gd" id="1_3pywv"]
[ext_resource type="PackedScene" uid="uid://bujaw8qgawaj8" path="res://src/players/humanPlayer.tscn" id="2_i47c8"]
[ext_resource type="PackedScene" uid="uid://fdj1nvw8fcxn" path="res://src/players/AiPlayer.tscn" id="3_wwbby"]
[ext_resource type="Resource" path="res://src/players/resources/alcaraz.tres" id="4_7pj63"]
[ext_resource type="PackedScene" uid="uid://r13b2pnjirfc" path="res://src/television/television-hud.tscn" id="4_upnw7"]
[ext_resource type="PackedScene" uid="uid://d237t32p1sgei" path="res://src/tennis_location/us_open/stadium.tscn" id="6_4vere"]
[ext_resource type="PackedScene" uid="uid://bq11dsxkra3s4" path="res://src/cameras.tscn" id="7_6frth"]
[ext_resource type="PackedScene" uid="uid://c7717agxjy34d" path="res://src/tennis_session/match_manager.tscn" id="8_2s2ac"]
[ext_resource type="PackedScene" uid="uid://cggqb75a8w8r" path="res://addons/debug_menu/debug_menu.tscn" id="10_7cjfu"]
[ext_resource type="PackedScene" uid="uid://b7nclbgkw6veg" path="res://src/hud/debug_hud.tscn" id="11_7qdcc"]
[ext_resource type="PackedScene" uid="uid://brw673es8wnx2" path="res://src/trajectory_drawer.tscn" id="11_324nl"]

[sub_resource type="Animation" id="1"]
resource_name = "start"
length = 3.0
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(3),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [false]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_wicjn"]
_data = {
"start": SubResource("1")
}

[sub_resource type="Shader" id="Shader_oe3gx"]
code = "
// NOTE: Shader automatically converted from Godot Engine 4.3.stable's ProceduralSkyMaterial.

shader_type sky;
render_mode use_debanding;

uniform vec4 sky_top_color : source_color = vec4(0.385, 0.454, 0.55, 1.0);
uniform vec4 sky_horizon_color : source_color = vec4(0.646, 0.656, 0.67, 1.0);
uniform float sky_curve : hint_range(0, 1) = 0.15;
uniform float sky_energy = 1.0; // In Lux.
uniform sampler2D sky_cover : filter_linear, source_color, hint_default_black;
uniform vec4 sky_cover_modulate : source_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform vec4 ground_bottom_color : source_color = vec4(0.2, 0.169, 0.133, 1.0);
uniform vec4 ground_horizon_color : source_color = vec4(0.646, 0.656, 0.67, 1.0);
uniform float ground_curve : hint_range(0, 1) = 0.02;
uniform float ground_energy = 1.0;
uniform float sun_angle_max = 30.0;
uniform float sun_curve : hint_range(0, 1) = 0.15;
uniform float exposure : hint_range(0, 128) = 1.0;

uniform sampler2D cloud_texture;
uniform sampler2D cloud_texture2;
uniform vec2 cloud_direction;
uniform vec2 cloud_direction2;
uniform vec2 cloud_scale;
uniform float cloud_distance;
uniform float cloud_speed;
uniform float cloud_speed2;

void sky() {
	float v_angle = acos(clamp(EYEDIR.y, -1.0, 1.0));
	float c = (1.0 - v_angle / (PI * 0.5));
	vec3 sky = mix(sky_horizon_color.rgb, sky_top_color.rgb, clamp(1.0 - pow(1.0 - c, 1.0 / sky_curve), 0.0, 1.0));
	sky *= sky_energy;

	if (LIGHT0_ENABLED) {
		float sun_angle = acos(dot(LIGHT0_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT0_SIZE) {
			sky = LIGHT0_COLOR * LIGHT0_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT0_SIZE) / (sun_angle_max - LIGHT0_SIZE);
			sky = mix(LIGHT0_COLOR * LIGHT0_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	if (LIGHT1_ENABLED) {
		float sun_angle = acos(dot(LIGHT1_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT1_SIZE) {
			sky = LIGHT1_COLOR * LIGHT1_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT1_SIZE) / (sun_angle_max - LIGHT1_SIZE);
			sky = mix(LIGHT1_COLOR * LIGHT1_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	if (LIGHT2_ENABLED) {
		float sun_angle = acos(dot(LIGHT2_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT2_SIZE) {
			sky = LIGHT2_COLOR * LIGHT2_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT2_SIZE) / (sun_angle_max - LIGHT2_SIZE);
			sky = mix(LIGHT2_COLOR * LIGHT2_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	if (LIGHT3_ENABLED) {
		float sun_angle = acos(dot(LIGHT3_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT3_SIZE) {
			sky = LIGHT3_COLOR * LIGHT3_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT3_SIZE) / (sun_angle_max - LIGHT3_SIZE);
			sky = mix(LIGHT3_COLOR * LIGHT3_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	vec4 sky_cover_texture = texture(sky_cover, SKY_COORDS);
	sky += (sky_cover_texture.rgb * sky_cover_modulate.rgb) * sky_cover_texture.a * sky_cover_modulate.a * sky_energy;

	c = (v_angle - (PI * 0.5)) / (PI * 0.5);
	vec3 ground = mix(ground_horizon_color.rgb, ground_bottom_color.rgb, clamp(1.0 - pow(1.0 - c, 1.0 / ground_curve), 0.0, 1.0));
	ground *= ground_energy;

	vec2 sky_uv = EYEDIR.xz / EYEDIR.y;
	vec3 clouds = texture(cloud_texture, sky_uv * cloud_scale + TIME * cloud_direction * cloud_speed).rgb - texture(cloud_texture2, sky_uv * cloud_scale + TIME * cloud_direction2 * cloud_speed2).rgb;
	//clouds = clouds - smoothstep(0.0, EYEDIR.y, cloud_distance);
	clouds = clamp(clouds, 0.0, 1.0);
	sky += clouds;
	
	COLOR = mix(ground, sky, step(0.0, EYEDIR.y)) * exposure;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_verti"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_ls07b"]
width = 1024
height = 1024
seamless = true
noise = SubResource("FastNoiseLite_verti")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_jpxow"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_ltmrp"]
width = 1024
height = 1024
seamless = true
noise = SubResource("FastNoiseLite_jpxow")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_t6lxu"]
shader = SubResource("Shader_oe3gx")
shader_parameter/sky_top_color = Color(0.291673, 0.457424, 0.658811, 1)
shader_parameter/sky_horizon_color = Color(0.6463, 0.6558, 0.6708, 1)
shader_parameter/sky_curve = 0.15
shader_parameter/sky_energy = 1.0
shader_parameter/sky_cover_modulate = Color(1, 1, 1, 1)
shader_parameter/ground_bottom_color = Color(0.2, 0.169, 0.133, 1)
shader_parameter/ground_horizon_color = Color(0.646, 0.656, 0.67, 1)
shader_parameter/ground_curve = 0.02
shader_parameter/ground_energy = 1.0
shader_parameter/sun_angle_max = 0.523599
shader_parameter/sun_curve = 0.15
shader_parameter/exposure = 1.0
shader_parameter/cloud_direction = Vector2(-1, 1)
shader_parameter/cloud_direction2 = Vector2(1, 0)
shader_parameter/cloud_scale = Vector2(0.05, 0.05)
shader_parameter/cloud_distance = null
shader_parameter/cloud_speed = 0.001
shader_parameter/cloud_speed2 = 0.002
shader_parameter/cloud_texture = SubResource("NoiseTexture2D_ls07b")
shader_parameter/cloud_texture2 = SubResource("NoiseTexture2D_ltmrp")

[sub_resource type="Sky" id="Sky_l3u5c"]
sky_material = SubResource("ShaderMaterial_t6lxu")

[sub_resource type="Environment" id="Environment_xdr50"]
background_mode = 2
sky = SubResource("Sky_l3u5c")
tonemap_mode = 1
glow_enabled = true
glow_normalized = true

[node name="TennisMatch" type="Node"]
script = ExtResource("1_3pywv")

[node name="Player" parent="." instance=ExtResource("2_i47c8")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 12.3828)

[node name="Skeleton3D" parent="Player/Model/h/test1/Human_rigify" index="0"]
bones/0/position = Vector3(0.263151, 1.3244, 0.194763)
bones/0/rotation = Quaternion(-0.199759, -0.0279685, 0.922148, -0.330086)
bones/0/scale = Vector3(1.02184, 1.02184, 1.02184)
bones/1/position = Vector3(-0.269739, 1.27951, 0.110102)
bones/1/rotation = Quaternion(0.323155, -0.142728, 0.848123, 0.394825)
bones/1/scale = Vector3(1.02939, 1.02939, 1.02939)
bones/4/position = Vector3(0, 1.41455, 0.140195)
bones/4/rotation = Quaternion(-0.709818, 0, 0, 0.704385)
bones/4/scale = Vector3(1.00953, 1.00955, 1.01418)
bones/5/scale = Vector3(1.00156, 1.00136, 0.997083)
bones/7/scale = Vector3(1.00156, 1.00136, 0.997083)
bones/9/scale = Vector3(1.00156, 1.00136, 0.997083)
bones/10/scale = Vector3(1.00156, 1.00136, 0.997083)
bones/13/scale = Vector3(0.997463, 1.0051, 0.997463)
bones/14/scale = Vector3(0.995407, 1.01696, 0.994846)
bones/15/rotation = Quaternion(-0.00516392, 0, 0, 0.999987)
bones/15/scale = Vector3(1.01424, 0.992844, 1.01424)
bones/16/rotation = Quaternion(0.196918, 0, 0, 0.98042)
bones/16/scale = Vector3(1.0071, 1.00101, 1.00604)
bones/17/rotation = Quaternion(0.0266186, 0, 0, 0.999646)
bones/17/scale = Vector3(0.986033, 0.986033, 0.986033)
bones/18/rotation = Quaternion(-0.151491, 0, 0, 0.988459)
bones/19/position = Vector3(0.263151, -0.194763, 1.3244)
bones/19/rotation = Quaternion(0.121565, 0.940276, -0.176365, 0.264572)
bones/19/scale = Vector3(1, 25.392, 1)
bones/20/position = Vector3(-0.269738, -0.110102, 1.27951)
bones/20/rotation = Quaternion(-0.146788, 0.94366, -0.1627, -0.247966)
bones/20/scale = Vector3(1, 22.1997, 1)
bones/26/position = Vector3(0, 0.00781143, 0.162319)
bones/26/rotation = Quaternion(-0.00460486, -4.61971e-10, -1.08312e-19, 0.999989)
bones/26/scale = Vector3(1.0141, 1.0141, 1.0141)
bones/110/position = Vector3(0, 0.00781143, 0.160774)
bones/110/rotation = Quaternion(-0.00155489, 0, 0, 0.999999)
bones/110/scale = Vector3(1.0047, 1.0047, 1.0047)
bones/112/rotation = Quaternion(0.138473, 0, 0, 0.990366)
bones/112/scale = Vector3(0.997626, 0.997625, 0.997625)
bones/115/position = Vector3(0, 0.066283, 0.000104459)
bones/115/rotation = Quaternion(-0.657757, 0, 0, 0.753231)
bones/115/scale = Vector3(1.0047, 1.0047, 1.0047)
bones/119/position = Vector3(0, 0.154862, 0.000108674)
bones/119/rotation = Quaternion(-0.655634, 0, 0, 0.755079)
bones/119/scale = Vector3(1.0047, 1.0047, 1.0047)
bones/121/rotation = Quaternion(0.0266186, 0, 0, 0.999646)
bones/121/scale = Vector3(0.986033, 0.986032, 0.986033)
bones/122/rotation = Quaternion(-0.151512, 0, 0, 0.988455)
bones/615/rotation = Quaternion(-0.790284, 0, 0, 0.612741)
bones/615/scale = Vector3(0.986033, 0.986033, 0.986033)
bones/616/rotation = Quaternion(0.806321, 0, 0, 0.591479)
bones/617/rotation = Quaternion(-0.804819, 0, 0, 0.59352)
bones/623/position = Vector3(0.0246003, 0.167387, 0.0346145)
bones/623/rotation = Quaternion(0.6101, 0.508766, 0.466206, -0.389343)
bones/624/rotation = Quaternion(-0.413603, -0.0291448, -0.178045, 0.892403)
bones/624/scale = Vector3(0.993009, 0.993009, 0.993009)
bones/625/rotation = Quaternion(0.0311188, 0.647572, -0.582998, 0.489688)
bones/625/scale = Vector3(0.986033, 0.986033, 0.986033)
bones/626/rotation = Quaternion(0.535368, 0.00157383, 0.0944887, 0.839316)
bones/627/rotation = Quaternion(0.0840948, -0.658946, -0.100694, 0.740661)
bones/632/rotation = Quaternion(-4.1376e-07, -0.354036, 3.65632e-09, 0.935232)
bones/635/rotation = Quaternion(3.56202e-08, -0.160155, 2.33748e-07, 0.987092)
bones/638/scale = Vector3(0.986033, 0.986033, 0.986033)
bones/639/scale = Vector3(0.986033, 0.986033, 0.986033)
bones/640/rotation = Quaternion(-0.401955, -0.438229, 0.799523, 0.0845615)
bones/641/rotation = Quaternion(0.53536, 0.00157889, 0.094491, 0.83932)
bones/643/rotation = Quaternion(0.0762372, -0.660248, -0.0544909, 0.745179)
bones/644/rotation = Quaternion(-0.281804, -0.514943, 0.781416, -0.211682)
bones/645/rotation = Quaternion(-0.190181, -0.0221071, -0.00428354, 0.981491)
bones/645/scale = Vector3(1.00045, 1.00045, 1.00045)
bones/646/rotation = Quaternion(0.374048, -2.01896e-06, -8.56925e-07, 0.92741)
bones/647/rotation = Quaternion(-0.140991, 0.475789, -0.566538, 0.657862)
bones/647/scale = Vector3(0.986033, 0.986033, 0.986033)
bones/649/rotation = Quaternion(-0.140984, 0.475783, -0.566544, 0.657861)
bones/649/scale = Vector3(0.986033, 0.986033, 0.986033)
bones/650/rotation = Quaternion(1.95694e-08, 0.135971, 1.03062e-07, 0.990713)
bones/651/rotation = Quaternion(0.543582, 0.135958, 0.00754412, 0.828237)
bones/652/rotation = Quaternion(-5.56126e-08, -0.354546, 1.06717e-07, 0.935039)
bones/653/rotation = Quaternion(0.0429306, -0.35354, -0.123969, 0.926174)
bones/748/position = Vector3(-0.0246003, 0.167387, 0.0346145)
bones/748/rotation = Quaternion(0.6101, -0.508766, -0.466206, -0.389343)
bones/749/rotation = Quaternion(-0.432142, -0.0106866, 0.102057, 0.895949)
bones/749/scale = Vector3(0.993009, 0.99301, 0.993009)
bones/750/rotation = Quaternion(-0.128026, -0.696825, 0.540981, 0.453193)
bones/750/scale = Vector3(0.986033, 0.986033, 0.986033)
bones/751/rotation = Quaternion(0.580766, -0.195077, -0.121072, 0.781024)
bones/760/rotation = Quaternion(4.16785e-08, 0.0560472, -1.90926e-07, 0.998428)
bones/763/scale = Vector3(0.986033, 0.986033, 0.986033)
bones/764/scale = Vector3(0.986033, 0.986033, 0.986033)
bones/765/rotation = Quaternion(0.325852, -0.583596, 0.737717, -0.0949239)
bones/766/rotation = Quaternion(0.580759, -0.195079, -0.12107, 0.781028)
bones/769/rotation = Quaternion(0.281798, -0.514951, 0.781415, 0.211677)
bones/770/rotation = Quaternion(-0.190181, 0.0221071, 0.00428352, 0.981491)
bones/770/scale = Vector3(1.00045, 1.00045, 1.00045)
bones/771/rotation = Quaternion(0.374048, 2.11831e-06, 8.82102e-07, 0.927409)
bones/772/rotation = Quaternion(-0.280435, -0.534095, 0.480009, 0.636938)
bones/772/scale = Vector3(0.986033, 0.986033, 0.986033)
bones/774/rotation = Quaternion(-0.280435, -0.534095, 0.480009, 0.636938)
bones/774/scale = Vector3(0.986033, 0.986033, 0.986033)
bones/775/rotation = Quaternion(5.75887e-08, -0.23831, -1.56386e-07, 0.971189)
bones/776/rotation = Quaternion(0.586617, -0.238289, -0.0885254, 0.768936)
bones/877/position = Vector3(0.0246003, 0.167387, 0.0346145)
bones/877/rotation = Quaternion(0.6101, 0.508766, 0.466206, -0.389343)
bones/878/position = Vector3(-0.0246003, 0.167387, 0.0346145)
bones/878/rotation = Quaternion(0.6101, -0.508766, -0.466206, -0.389343)
bones/883/position = Vector3(0.494306, 1.13242, -0.457356)
bones/883/rotation = Quaternion(-0.711998, -2.52354e-05, 1.84434e-05, 0.702181)
bones/883/scale = Vector3(1.01416, 1.01416, 1.01416)
bones/888/position = Vector3(-0.494306, 1.13242, -0.457356)
bones/888/rotation = Quaternion(-0.711998, 2.52348e-05, -1.8444e-05, 0.702181)
bones/888/scale = Vector3(1.01416, 1.01416, 1.01416)
bones/890/position = Vector3(0, 1.78796, 0.217705)
bones/922/position = Vector3(0.0122124, 1.71595, 0.159103)
bones/925/position = Vector3(-0.0122124, 1.71595, 0.159103)
bones/928/position = Vector3(0.0125891, 1.72322, 0.160614)
bones/931/position = Vector3(-0.0125891, 1.72322, 0.160614)

[node name="racket" parent="Player/Model/h/test1/Human_rigify/Skeleton3D" index="0"]
transform = Transform3D(-0.188692, -0.182285, 0.964971, -0.653179, 0.75705, 0.0152846, -0.733317, -0.627414, -0.261914, 0.0433089, 1.46533, 0.510782)

[node name="AudioStreamPlayer3D" parent="Player" index="4"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.56929, 0)

[node name="AiPlayer" parent="." instance=ExtResource("3_wwbby")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -15.0306)
player_data = ExtResource("4_7pj63")
move_speed = 10.0

[node name="Skeleton3D" parent="AiPlayer/Model/h/test1/Human_rigify" index="0"]
bones/0/position = Vector3(0.263151, 1.3244, 0.194763)
bones/0/rotation = Quaternion(-0.199759, -0.0279685, 0.922148, -0.330086)
bones/0/scale = Vector3(1.02184, 1.02184, 1.02184)
bones/1/position = Vector3(-0.269739, 1.27951, 0.110102)
bones/1/rotation = Quaternion(0.323155, -0.142728, 0.848123, 0.394825)
bones/1/scale = Vector3(1.02939, 1.02939, 1.02939)
bones/4/position = Vector3(0, 1.41455, 0.140195)
bones/4/rotation = Quaternion(-0.709818, 0, 0, 0.704385)
bones/4/scale = Vector3(1.00953, 1.00955, 1.01418)
bones/5/scale = Vector3(1.00156, 1.00136, 0.997083)
bones/7/scale = Vector3(1.00156, 1.00136, 0.997083)
bones/9/scale = Vector3(1.00156, 1.00136, 0.997083)
bones/10/scale = Vector3(1.00156, 1.00136, 0.997083)
bones/13/scale = Vector3(0.997463, 1.0051, 0.997463)
bones/14/scale = Vector3(0.995407, 1.01696, 0.994846)
bones/15/rotation = Quaternion(-0.00516392, 0, 0, 0.999987)
bones/15/scale = Vector3(1.01424, 0.992844, 1.01424)
bones/16/rotation = Quaternion(0.196918, 0, 0, 0.98042)
bones/16/scale = Vector3(1.0071, 1.00101, 1.00604)
bones/17/rotation = Quaternion(0.0266186, 0, 0, 0.999646)
bones/17/scale = Vector3(0.986033, 0.986033, 0.986033)
bones/18/rotation = Quaternion(-0.151491, 0, 0, 0.988459)
bones/19/position = Vector3(0.263151, -0.194763, 1.3244)
bones/19/rotation = Quaternion(0.121565, 0.940276, -0.176365, 0.264572)
bones/19/scale = Vector3(1, 25.392, 1)
bones/20/position = Vector3(-0.269738, -0.110102, 1.27951)
bones/20/rotation = Quaternion(-0.146788, 0.94366, -0.1627, -0.247966)
bones/20/scale = Vector3(1, 22.1997, 1)
bones/26/position = Vector3(0, 0.00781143, 0.162319)
bones/26/rotation = Quaternion(-0.00460486, -4.61971e-10, -1.08312e-19, 0.999989)
bones/26/scale = Vector3(1.0141, 1.0141, 1.0141)
bones/110/position = Vector3(0, 0.00781143, 0.160774)
bones/110/rotation = Quaternion(-0.00155489, 0, 0, 0.999999)
bones/110/scale = Vector3(1.0047, 1.0047, 1.0047)
bones/112/rotation = Quaternion(0.138473, 0, 0, 0.990366)
bones/112/scale = Vector3(0.997626, 0.997625, 0.997625)
bones/115/position = Vector3(0, 0.066283, 0.000104459)
bones/115/rotation = Quaternion(-0.657757, 0, 0, 0.753231)
bones/115/scale = Vector3(1.0047, 1.0047, 1.0047)
bones/119/position = Vector3(0, 0.154862, 0.000108674)
bones/119/rotation = Quaternion(-0.655634, 0, 0, 0.755079)
bones/119/scale = Vector3(1.0047, 1.0047, 1.0047)
bones/121/rotation = Quaternion(0.0266186, 0, 0, 0.999646)
bones/121/scale = Vector3(0.986033, 0.986032, 0.986033)
bones/122/rotation = Quaternion(-0.151512, 0, 0, 0.988455)
bones/615/rotation = Quaternion(-0.790284, 0, 0, 0.612741)
bones/615/scale = Vector3(0.986033, 0.986033, 0.986033)
bones/616/rotation = Quaternion(0.806321, 0, 0, 0.591479)
bones/617/rotation = Quaternion(-0.804819, 0, 0, 0.59352)
bones/623/position = Vector3(0.0246003, 0.167387, 0.0346145)
bones/623/rotation = Quaternion(0.6101, 0.508766, 0.466206, -0.389343)
bones/624/rotation = Quaternion(-0.413603, -0.0291448, -0.178045, 0.892403)
bones/624/scale = Vector3(0.993009, 0.993009, 0.993009)
bones/625/rotation = Quaternion(0.0311188, 0.647572, -0.582998, 0.489688)
bones/625/scale = Vector3(0.986033, 0.986033, 0.986033)
bones/626/rotation = Quaternion(0.535368, 0.00157383, 0.0944887, 0.839316)
bones/627/rotation = Quaternion(0.0840948, -0.658946, -0.100694, 0.740661)
bones/632/rotation = Quaternion(-4.1376e-07, -0.354036, 3.65632e-09, 0.935232)
bones/635/rotation = Quaternion(3.56202e-08, -0.160155, 2.33748e-07, 0.987092)
bones/638/scale = Vector3(0.986033, 0.986033, 0.986033)
bones/639/scale = Vector3(0.986033, 0.986033, 0.986033)
bones/640/rotation = Quaternion(-0.401955, -0.438229, 0.799523, 0.0845615)
bones/641/rotation = Quaternion(0.53536, 0.00157889, 0.094491, 0.83932)
bones/643/rotation = Quaternion(0.0762372, -0.660248, -0.0544909, 0.745179)
bones/644/rotation = Quaternion(-0.281804, -0.514943, 0.781416, -0.211682)
bones/645/rotation = Quaternion(-0.190181, -0.0221071, -0.00428354, 0.981491)
bones/645/scale = Vector3(1.00045, 1.00045, 1.00045)
bones/646/rotation = Quaternion(0.374048, -2.01896e-06, -8.56925e-07, 0.92741)
bones/647/rotation = Quaternion(-0.140991, 0.475789, -0.566538, 0.657862)
bones/647/scale = Vector3(0.986033, 0.986033, 0.986033)
bones/649/rotation = Quaternion(-0.140984, 0.475783, -0.566544, 0.657861)
bones/649/scale = Vector3(0.986033, 0.986033, 0.986033)
bones/650/rotation = Quaternion(1.95694e-08, 0.135971, 1.03062e-07, 0.990713)
bones/651/rotation = Quaternion(0.543582, 0.135958, 0.00754412, 0.828237)
bones/652/rotation = Quaternion(-5.56126e-08, -0.354546, 1.06717e-07, 0.935039)
bones/653/rotation = Quaternion(0.0429306, -0.35354, -0.123969, 0.926174)
bones/748/position = Vector3(-0.0246003, 0.167387, 0.0346145)
bones/748/rotation = Quaternion(0.6101, -0.508766, -0.466206, -0.389343)
bones/749/rotation = Quaternion(-0.432142, -0.0106866, 0.102057, 0.895949)
bones/749/scale = Vector3(0.993009, 0.99301, 0.993009)
bones/750/rotation = Quaternion(-0.128026, -0.696825, 0.540981, 0.453193)
bones/750/scale = Vector3(0.986033, 0.986033, 0.986033)
bones/751/rotation = Quaternion(0.580766, -0.195077, -0.121072, 0.781024)
bones/760/rotation = Quaternion(4.16785e-08, 0.0560472, -1.90926e-07, 0.998428)
bones/763/scale = Vector3(0.986033, 0.986033, 0.986033)
bones/764/scale = Vector3(0.986033, 0.986033, 0.986033)
bones/765/rotation = Quaternion(0.325852, -0.583596, 0.737717, -0.0949239)
bones/766/rotation = Quaternion(0.580759, -0.195079, -0.12107, 0.781028)
bones/769/rotation = Quaternion(0.281798, -0.514951, 0.781415, 0.211677)
bones/770/rotation = Quaternion(-0.190181, 0.0221071, 0.00428352, 0.981491)
bones/770/scale = Vector3(1.00045, 1.00045, 1.00045)
bones/771/rotation = Quaternion(0.374048, 2.11831e-06, 8.82102e-07, 0.927409)
bones/772/rotation = Quaternion(-0.280435, -0.534095, 0.480009, 0.636938)
bones/772/scale = Vector3(0.986033, 0.986033, 0.986033)
bones/774/rotation = Quaternion(-0.280435, -0.534095, 0.480009, 0.636938)
bones/774/scale = Vector3(0.986033, 0.986033, 0.986033)
bones/775/rotation = Quaternion(5.75887e-08, -0.23831, -1.56386e-07, 0.971189)
bones/776/rotation = Quaternion(0.586617, -0.238289, -0.0885254, 0.768936)
bones/877/position = Vector3(0.0246003, 0.167387, 0.0346145)
bones/877/rotation = Quaternion(0.6101, 0.508766, 0.466206, -0.389343)
bones/878/position = Vector3(-0.0246003, 0.167387, 0.0346145)
bones/878/rotation = Quaternion(0.6101, -0.508766, -0.466206, -0.389343)
bones/883/position = Vector3(0.494306, 1.13242, -0.457356)
bones/883/rotation = Quaternion(-0.711998, -2.52354e-05, 1.84434e-05, 0.702181)
bones/883/scale = Vector3(1.01416, 1.01416, 1.01416)
bones/888/position = Vector3(-0.494306, 1.13242, -0.457356)
bones/888/rotation = Quaternion(-0.711998, 2.52348e-05, -1.8444e-05, 0.702181)
bones/888/scale = Vector3(1.01416, 1.01416, 1.01416)
bones/890/position = Vector3(0, 1.78796, 0.217705)
bones/922/position = Vector3(0.0122124, 1.71595, 0.159103)
bones/925/position = Vector3(-0.0122124, 1.71595, 0.159103)
bones/928/position = Vector3(0.0125891, 1.72322, 0.160614)
bones/931/position = Vector3(-0.0125891, 1.72322, 0.160614)

[node name="racket" parent="AiPlayer/Model/h/test1/Human_rigify/Skeleton3D" index="0"]
transform = Transform3D(-0.188692, -0.182285, 0.964971, -0.653179, 0.75705, 0.0152846, -0.733317, -0.627414, -0.261914, 0.0433089, 1.46533, 0.510782)

[node name="AudioStreamPlayer3D" parent="AiPlayer" index="4"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.56929, 0)

[node name="TelevisionHUD" parent="." instance=ExtResource("4_upnw7")]

[node name="Panel" parent="TelevisionHUD/MatchStatsPanel" index="0"]
anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
offset_left = 0.0
offset_top = 0.0
offset_right = 500.0
offset_bottom = 300.0

[node name="Label" parent="TelevisionHUD/MatchStatsPanel/Panel" index="0"]
offset_left = 0.0
offset_top = 0.0
offset_right = 40.0
offset_bottom = 23.0

[node name="Label2" parent="TelevisionHUD/MatchStatsPanel/Panel" index="1"]
offset_left = 0.0
offset_top = 0.0
offset_right = 55.0
offset_bottom = 31.0

[node name="Label3" parent="TelevisionHUD/MatchStatsPanel/Panel" index="2"]
anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
offset_left = 0.0
offset_top = 0.0
offset_right = 55.0
offset_bottom = 31.0

[node name="PlayerImage" parent="TelevisionHUD/MatchStatsPanel" index="1"]
offset_left = 0.0
offset_top = 0.0
offset_right = 200.0
offset_bottom = 200.0

[node name="PlayerImage2" parent="TelevisionHUD/MatchStatsPanel" index="2"]
offset_left = 0.0
offset_top = 0.0
offset_right = 200.0
offset_bottom = 200.0

[node name="AnimationPlayer" parent="TelevisionHUD/MatchStatsPanel" index="3"]
libraries = {
"": SubResource("AnimationLibrary_wicjn")
}

[node name="Stadium" parent="." instance=ExtResource("6_4vere")]

[node name="Cameras" parent="." instance=ExtResource("7_6frth")]

[node name="MatchManager" parent="." node_paths=PackedStringArray("player0", "player1", "court", "stadium", "televisionHud") groups=["Player"] instance=ExtResource("8_2s2ac")]
player0 = NodePath("../Player")
player1 = NodePath("../AiPlayer")
court = NodePath("../Stadium/Court")
stadium = NodePath("../Stadium")
televisionHud = NodePath("../TelevisionHUD")

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_xdr50")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(-0.441899, -0.894442, -0.0685425, -0.706239, 0.299768, 0.641377, -0.553129, 0.331832, -0.764157, 1.20894, 7.64477, -8.49079)
shadow_enabled = true

[node name="TrajectoryDrawer" parent="." instance=ExtResource("11_324nl")]
visible = false

[node name="DebugHud" parent="." instance=ExtResource("11_7qdcc")]

[node name="CanvasLayer" parent="." instance=ExtResource("10_7cjfu")]

[editable path="Player"]
[editable path="Player/Model"]
[editable path="Player/Model/h/test1"]
[editable path="AiPlayer"]
[editable path="AiPlayer/Model"]
[editable path="AiPlayer/Model/h/test1"]
[editable path="TelevisionHUD"]
[editable path="TelevisionHUD/ScoreDisplay"]
[editable path="TelevisionHUD/ScoreDisplay/VBoxContainer/Player1ScorePanel"]
[editable path="Stadium"]
[editable path="Cameras"]
[editable path="MatchManager"]
