[gd_scene load_steps=22 format=3 uid="uid://bcwuxgarbilrg"]

[ext_resource type="Script" path="res://src/tennis_session/tennis_match.gd" id="1_3pywv"]
[ext_resource type="PackedScene" uid="uid://bujaw8qgawaj8" path="res://src/players/humanPlayer.tscn" id="2_i47c8"]
[ext_resource type="PackedScene" uid="uid://fdj1nvw8fcxn" path="res://src/players/AiPlayer.tscn" id="3_wwbby"]
[ext_resource type="Resource" path="res://src/players/resources/alcaraz.tres" id="4_7pj63"]
[ext_resource type="PackedScene" uid="uid://r13b2pnjirfc" path="res://src/television/television-hud.tscn" id="4_upnw7"]
[ext_resource type="PackedScene" uid="uid://d237t32p1sgei" path="res://src/tennis_location/us_open/stadium.tscn" id="6_4vere"]
[ext_resource type="PackedScene" uid="uid://bq11dsxkra3s4" path="res://src/cameras.tscn" id="7_6frth"]
[ext_resource type="PackedScene" uid="uid://c7717agxjy34d" path="res://src/tennis_session/match_manager.tscn" id="8_2s2ac"]
[ext_resource type="PackedScene" uid="uid://cggqb75a8w8r" path="res://addons/debug_menu/debug_menu.tscn" id="10_7cjfu"]
[ext_resource type="PackedScene" uid="uid://b7nclbgkw6veg" path="res://src/hud/debug_hud.tscn" id="11_7qdcc"]
[ext_resource type="PackedScene" uid="uid://brw673es8wnx2" path="res://src/trajectory_drawer.tscn" id="11_324nl"]

[sub_resource type="Animation" id="1"]
resource_name = "start"
length = 3.0
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(3),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [false]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_wicjn"]
_data = {
"start": SubResource("1")
}

[sub_resource type="Shader" id="Shader_oe3gx"]
code = "
// NOTE: Shader automatically converted from Godot Engine 4.3.stable's ProceduralSkyMaterial.

shader_type sky;
render_mode use_debanding;

uniform vec4 sky_top_color : source_color = vec4(0.385, 0.454, 0.55, 1.0);
uniform vec4 sky_horizon_color : source_color = vec4(0.646, 0.656, 0.67, 1.0);
uniform float sky_curve : hint_range(0, 1) = 0.15;
uniform float sky_energy = 1.0; // In Lux.
uniform sampler2D sky_cover : filter_linear, source_color, hint_default_black;
uniform vec4 sky_cover_modulate : source_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform vec4 ground_bottom_color : source_color = vec4(0.2, 0.169, 0.133, 1.0);
uniform vec4 ground_horizon_color : source_color = vec4(0.646, 0.656, 0.67, 1.0);
uniform float ground_curve : hint_range(0, 1) = 0.02;
uniform float ground_energy = 1.0;
uniform float sun_angle_max = 30.0;
uniform float sun_curve : hint_range(0, 1) = 0.15;
uniform float exposure : hint_range(0, 128) = 1.0;

uniform sampler2D cloud_texture;
uniform sampler2D cloud_texture2;
uniform vec2 cloud_direction;
uniform vec2 cloud_direction2;
uniform vec2 cloud_scale;
uniform float cloud_distance;
uniform float cloud_speed;
uniform float cloud_speed2;

void sky() {
	float v_angle = acos(clamp(EYEDIR.y, -1.0, 1.0));
	float c = (1.0 - v_angle / (PI * 0.5));
	vec3 sky = mix(sky_horizon_color.rgb, sky_top_color.rgb, clamp(1.0 - pow(1.0 - c, 1.0 / sky_curve), 0.0, 1.0));
	sky *= sky_energy;

	if (LIGHT0_ENABLED) {
		float sun_angle = acos(dot(LIGHT0_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT0_SIZE) {
			sky = LIGHT0_COLOR * LIGHT0_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT0_SIZE) / (sun_angle_max - LIGHT0_SIZE);
			sky = mix(LIGHT0_COLOR * LIGHT0_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	if (LIGHT1_ENABLED) {
		float sun_angle = acos(dot(LIGHT1_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT1_SIZE) {
			sky = LIGHT1_COLOR * LIGHT1_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT1_SIZE) / (sun_angle_max - LIGHT1_SIZE);
			sky = mix(LIGHT1_COLOR * LIGHT1_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	if (LIGHT2_ENABLED) {
		float sun_angle = acos(dot(LIGHT2_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT2_SIZE) {
			sky = LIGHT2_COLOR * LIGHT2_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT2_SIZE) / (sun_angle_max - LIGHT2_SIZE);
			sky = mix(LIGHT2_COLOR * LIGHT2_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	if (LIGHT3_ENABLED) {
		float sun_angle = acos(dot(LIGHT3_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT3_SIZE) {
			sky = LIGHT3_COLOR * LIGHT3_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT3_SIZE) / (sun_angle_max - LIGHT3_SIZE);
			sky = mix(LIGHT3_COLOR * LIGHT3_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	vec4 sky_cover_texture = texture(sky_cover, SKY_COORDS);
	sky += (sky_cover_texture.rgb * sky_cover_modulate.rgb) * sky_cover_texture.a * sky_cover_modulate.a * sky_energy;

	c = (v_angle - (PI * 0.5)) / (PI * 0.5);
	vec3 ground = mix(ground_horizon_color.rgb, ground_bottom_color.rgb, clamp(1.0 - pow(1.0 - c, 1.0 / ground_curve), 0.0, 1.0));
	ground *= ground_energy;

	vec2 sky_uv = EYEDIR.xz / EYEDIR.y;
	vec3 clouds = texture(cloud_texture, sky_uv * cloud_scale + TIME * cloud_direction * cloud_speed).rgb - texture(cloud_texture2, sky_uv * cloud_scale + TIME * cloud_direction2 * cloud_speed2).rgb;
	//clouds = clouds - smoothstep(0.0, EYEDIR.y, cloud_distance);
	clouds = clamp(clouds, 0.0, 1.0);
	sky += clouds;
	
	COLOR = mix(ground, sky, step(0.0, EYEDIR.y)) * exposure;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_verti"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_ls07b"]
width = 1024
height = 1024
seamless = true
noise = SubResource("FastNoiseLite_verti")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_jpxow"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_ltmrp"]
width = 1024
height = 1024
seamless = true
noise = SubResource("FastNoiseLite_jpxow")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_t6lxu"]
shader = SubResource("Shader_oe3gx")
shader_parameter/sky_top_color = Color(0.291673, 0.457424, 0.658811, 1)
shader_parameter/sky_horizon_color = Color(0.6463, 0.6558, 0.6708, 1)
shader_parameter/sky_curve = 0.15
shader_parameter/sky_energy = 1.0
shader_parameter/sky_cover_modulate = Color(1, 1, 1, 1)
shader_parameter/ground_bottom_color = Color(0.2, 0.169, 0.133, 1)
shader_parameter/ground_horizon_color = Color(0.646, 0.656, 0.67, 1)
shader_parameter/ground_curve = 0.02
shader_parameter/ground_energy = 1.0
shader_parameter/sun_angle_max = 0.523599
shader_parameter/sun_curve = 0.15
shader_parameter/exposure = 1.0
shader_parameter/cloud_direction = Vector2(-1, 1)
shader_parameter/cloud_direction2 = Vector2(1, 0)
shader_parameter/cloud_scale = Vector2(0.05, 0.05)
shader_parameter/cloud_distance = null
shader_parameter/cloud_speed = 0.001
shader_parameter/cloud_speed2 = 0.002
shader_parameter/cloud_texture = SubResource("NoiseTexture2D_ls07b")
shader_parameter/cloud_texture2 = SubResource("NoiseTexture2D_ltmrp")

[sub_resource type="Sky" id="Sky_l3u5c"]
sky_material = SubResource("ShaderMaterial_t6lxu")

[sub_resource type="Environment" id="Environment_xdr50"]
background_mode = 2
sky = SubResource("Sky_l3u5c")
tonemap_mode = 1
glow_enabled = true
glow_normalized = true

[node name="TennisMatch" type="Node"]
script = ExtResource("1_3pywv")

[node name="Player" parent="." instance=ExtResource("2_i47c8")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 12.3828)

[node name="AiPlayer" parent="." instance=ExtResource("3_wwbby")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -15.0306)
player_data = ExtResource("4_7pj63")
move_speed = 10.0

[node name="TelevisionHUD" parent="." instance=ExtResource("4_upnw7")]

[node name="Panel" parent="TelevisionHUD/MatchStatsPanel" index="0"]
anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
offset_left = 0.0
offset_top = 0.0
offset_right = 500.0
offset_bottom = 300.0

[node name="Label" parent="TelevisionHUD/MatchStatsPanel/Panel" index="0"]
offset_left = 0.0
offset_top = 0.0
offset_right = 40.0
offset_bottom = 23.0

[node name="Label2" parent="TelevisionHUD/MatchStatsPanel/Panel" index="1"]
offset_left = 0.0
offset_top = 0.0
offset_right = 55.0
offset_bottom = 31.0

[node name="Label3" parent="TelevisionHUD/MatchStatsPanel/Panel" index="2"]
anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
offset_left = 0.0
offset_top = 0.0
offset_right = 55.0
offset_bottom = 31.0

[node name="PlayerImage" parent="TelevisionHUD/MatchStatsPanel" index="1"]
offset_left = 0.0
offset_top = 0.0
offset_right = 200.0
offset_bottom = 200.0

[node name="PlayerImage2" parent="TelevisionHUD/MatchStatsPanel" index="2"]
offset_left = 0.0
offset_top = 0.0
offset_right = 200.0
offset_bottom = 200.0

[node name="AnimationPlayer" parent="TelevisionHUD/MatchStatsPanel" index="3"]
libraries = {
"": SubResource("AnimationLibrary_wicjn")
}

[node name="Stadium" parent="." instance=ExtResource("6_4vere")]

[node name="Cameras" parent="." instance=ExtResource("7_6frth")]

[node name="MatchManager" parent="." node_paths=PackedStringArray("player0", "player1", "court", "stadium", "televisionHud") groups=["Player"] instance=ExtResource("8_2s2ac")]
player0 = NodePath("../Player")
player1 = NodePath("../AiPlayer")
court = NodePath("../Stadium/Court")
stadium = NodePath("../Stadium")
televisionHud = NodePath("../TelevisionHUD")

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_xdr50")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(-0.45349, -0.137473, -0.880595, -0.852566, -0.221059, 0.473565, -0.259766, 0.965523, -0.0169572, 0, 5.70078, 0)
shadow_enabled = true

[node name="TrajectoryDrawer" parent="." instance=ExtResource("11_324nl")]

[node name="DebugHud" parent="." instance=ExtResource("11_7qdcc")]

[node name="CanvasLayer" parent="." instance=ExtResource("10_7cjfu")]

[editable path="Player"]
[editable path="Player/Model"]
[editable path="Player/Model/v3player"]
[editable path="AiPlayer"]
[editable path="AiPlayer/Model"]
[editable path="AiPlayer/Model/v3player"]
[editable path="TelevisionHUD"]
[editable path="TelevisionHUD/ScoreDisplay"]
[editable path="TelevisionHUD/ScoreDisplay/VBoxContainer/Player1ScorePanel"]
[editable path="Stadium"]
[editable path="Cameras"]
[editable path="MatchManager"]
